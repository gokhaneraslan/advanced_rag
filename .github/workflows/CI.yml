name: RAG Pipeline CI/CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  DOCKER_IMAGE_NAME: rag-api

jobs:
  
  # Job 1: Code Quality & Linting
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort pylint

      - name: Run Black (code formatter check)
        run: black --check --diff .
        continue-on-error: true

      - name: Run isort (import sorting check)
        run: isort --check-only --diff .
        continue-on-error: true

      - name: Run flake8 (linting)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        continue-on-error: true

      - name: Run pylint (code analysis)
        run: pylint src/ --fail-under=7.0
        continue-on-error: true

  
  # Job 2: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Vulnerability Scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run Safety (dependency vulnerability check)
        run: safety check --json
        continue-on-error: true

      - name: Run Bandit (security issues in code)
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json

  
  # Job 3: Testing
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    needs: [code-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Hugging Face models
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: ${{ runner.os }}-huggingface-models-v2
          restore-keys: |
            ${{ runner.os }}-huggingface-models-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest with coverage
        env:
          PYTHONPATH: .
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          LOG_LEVEL: DEBUG
        run: |
          pytest --cov=src --cov-report=xml --cov-report=html --cov-report=term -v

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  
  # Job 4: Build Docker Image
  build-docker:
    runs-on: ubuntu-latest
    name: Build Docker Image
    needs: [test, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Build Docker image (without load)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          outputs: type=docker,dest=/tmp/rag-api-image.tar
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Load Docker image
        run: |
          docker load --input /tmp/rag-api-image.tar
          docker images

      - name: Test Docker image
        run: |
          docker run --rm ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} python -c "import src; print('Import successful')"
      
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/rag-api-image.tar
          retention-days: 1

  
  # Job 5: Integration Test in Docker
  integration-test-docker:
    runs-on: ubuntu-latest
    name: Integration Test (Docker)
    needs: [build-docker]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Load Docker image
        run: |
          docker load --input rag-api-image.tar
          docker images

      - name: Create test directories
        run: |
          mkdir -p data logs vector_store

      - name: Run container
        run: |
          docker run -d \
            --name rag-test \
            -p 8000:8000 \
            -v $(pwd)/data:/app/data:ro \
            -v $(pwd)/vector_store:/app/vector_store \
            -v $(pwd)/logs:/app/logs \
            -e GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
            -e LOG_LEVEL=INFO \
            -e TF_CPP_MIN_LOG_LEVEL=3 \
            -e GRPC_ENABLE_FORK_SUPPORT=0 \
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          
          echo "Container started"
          sleep 10
          
          # Check if container is running
          if ! docker ps | grep -q rag-test; then
            echo "‚ùå Container exited immediately!"
            docker logs rag-test
            exit 1
          fi
          
          echo "Container is running, proceeding to health check..."

      - name: Wait for container to be healthy
        run: |
          echo "Waiting for health check..."
          RETRY_COUNT=0
          MAX_RETRIES=300
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Check if container is still running
            if ! docker ps | grep -q rag-test; then
              echo "‚ùå Container stopped unexpectedly!"
              docker logs rag-test
              exit 1
            fi
            
            # Try health check
            if curl -sf http://localhost:8000/health > /dev/null 2>&1; then
              echo "‚úÖ Container is healthy after $((RETRY_COUNT * 3)) seconds!"
              curl -s http://localhost:8000/health | python3 -m json.tool || true
              exit 0
            fi
            
            echo "Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES: Not ready yet..."
            
            # Show progress - print last few log lines
            if [ $((RETRY_COUNT % 10)) -eq 0 ] && [ $RETRY_COUNT -gt 0 ]; then
              echo "--- Recent logs ---"
              docker logs --tail 5 rag-test
            fi
            
            sleep 3
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done
          
          echo "‚ùå Container failed to become healthy after $((MAX_RETRIES * 3)) seconds"
          echo "=== Full Container Logs ==="
          docker logs rag-test
          exit 1

      - name: Test API endpoints
        run: |
          set -e
          
          echo "Testing root endpoint..."
          curl -f http://localhost:8000/ || exit 1
          echo "‚úÖ Root endpoint OK"
          
          echo "Testing health endpoint..."
          curl -f http://localhost:8000/health || exit 1
          echo "‚úÖ Health endpoint OK"
          
          echo "Testing session creation..."
          SESSION_JSON=$(curl -sf -X POST http://localhost:8000/session/create)
          echo "Session response: $SESSION_JSON"
          
          SESSION_ID=$(echo "$SESSION_JSON" | python3 -c "import sys, json; print(json.load(sys.stdin)['session_id'])" 2>/dev/null || echo "")
          
          if [ -z "$SESSION_ID" ]; then
            echo "‚ùå Failed to create session"
            exit 1
          fi
          
          echo "‚úÖ Session created: $SESSION_ID"
          
          echo "Testing query endpoint..."
          QUERY_RESPONSE=$(curl -sf -X POST http://localhost:8000/query \
            -H "Content-Type: application/json" \
            -d "{\"query\": \"Hello, what can you help with?\", \"session_id\": \"$SESSION_ID\"}")
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Query endpoint OK"
            echo "Response preview:"
            echo "$QUERY_RESPONSE" | python3 -m json.tool | head -30 || echo "$QUERY_RESPONSE"
          else
            echo "‚ùå Query endpoint failed"
            exit 1
          fi
          
          echo ""
          echo "üéâ All API endpoint tests passed!"

      - name: Check container logs
        if: always()
        run: |
          echo "=== Container Logs (last 50 lines) ==="
          docker logs --tail 50 rag-test

      - name: Stop container
        if: always()
        run: docker stop rag-test || true

  
  # Job 6: Deploy (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [integration-test-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true

      - name: Deploy notification
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "Image: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
          echo "SHA: ${{ github.sha }}"